# Parking Lot System

## About The Project
This project is a Low-Level Design and implementation of a Parking Lot system in Java. It follows key Object-Oriented Design principles and incorporates concurrency handling and extensibility patterns suitable for backend systems.

### Features
- Supports multiple vehicle types: Car, Truck, Van, Motorcycle
- Different parking spot types with classes for Compact, Large, Handicapped, and Motorcycle spots
- Singleton ParkingLot class managing multiple floors and parking spots
- Entrance and Exit panels simulating ticket issuance and spot vacating
- Pricing strategy implemented using Strategy design pattern, currently with hourly pricing
- Thread-safe spot assignment using synchronized methods and concurrent collections
- Custom exceptions for handling full parking lot and unavailable slots
- System scenarios demonstrating parking, exiting, and full-lot handling
- Dynamic display of available parking slots by type

## Getting Started

### Prerequisites
- Java JDK 11 or higher
- Maven or any Java build tool for project management (optional for simple runs)
- IDE of your choice (IntelliJ, Eclipse, VSCode, etc.)

### Installation
1. Clone the repository:
2. Import into your IDE as a Maven or Java project
3. Build the project:mvn clean install
4. Run the `Application` class to see the demo and system usage

## Usage
The demo in the `Application` main method shows:
- Creation of parking lot with multiple floors and spots
- Vehicle entry with ticket generation and spot assignment
- Vehicle exits with fee calculation and spot vacating
- Handling attempts to park when lot is full
- Display of available slots by type after operations

## Extensibility with Parking Spot Assignment Strategy

Currently, the parking spot assignment is handled directly by the `ParkingFloor` class with a fixed vehicle-to-spot-type mapping.

To allow more flexible spot allocation, the system can be extended with a **Parking Spot Assignment Strategy** using the Strategy design pattern:

- Define a `ParkingSpotAssignmentStrategy` interface with methods like `getParkingSpot(Vehicle vehicle)` and `releaseParkingSpot(ParkingSpot spot)`
- Implement different strategies such as:
- **NearestSpotStrategy:** Assign the nearest available spot
- **MostFreeSpotsStrategy:** Assign spot based on floor with most availability
- **PriorityBasedStrategy:** Assign spots based on priority rules or vehicle attributes
- Have `ParkingLot` or `Entrance` classes hold a reference to a strategy instance and delegate spot assignment calls to it
- This improves modularity, allows adding or switching allocation algorithms without touching core parking floor logic, and better supports customization for complex real-world scenarios

## Contributing
Contributions are welcome! Please fork the repository and submit pull requests. For major changes, open an issue to discuss beforehand.

## License
This project is licensed under the MIT License.

## Contact
Your Name - your.email@example.com

Repository Link: [https://github.com/your-username/parking-lot-system](https://github.com/your-username/parking-lot-system)
