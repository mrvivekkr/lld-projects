# Parking Lot System

## About The Project

This project is a Low-Level Design (LLD) and implementation of a Parking Lot system in Java. It follows key Object-Oriented Design principles and incorporates concurrency handling and extensibility patterns suitable for backend systems.

### Features

- Supports multiple vehicle types: Car, Truck, Van, Motorcycle
- Different parking spot types: Compact, Large, Handicapped, Motorcycle
- Singleton `ParkingLot` class managing multiple floors and parking spots
- Entrance and Exit panels for ticket issuance and spot vacating
- Pricing strategy implemented via Strategy design pattern (currently hourly pricing)
- Thread-safe spot assignment using synchronized methods and concurrent collections
- Custom exceptions for handling full parking lot and unavailable slots
- Demonstrates parking, exiting, and full-lot handling scenarios
- Dynamic display of available parking slots by type

## Getting Started

### Prerequisites

- Java JDK 11 or higher
- Maven or other Java build tool
- IDE of your choice (IntelliJ, Eclipse, VSCode, etc.)

### Installation

1. **Clone the repository:**
2. **Import into your IDE** as a Maven or Java project.
3. **Build the project:**
mvn clean install
4. **Run** the `Application` class to see the demo and system usage.

## Usage

The demo in the `Application` main method shows:

- Creation of a parking lot with multiple floors and spots
- Vehicle entry with ticket generation and spot assignment
- Vehicle exit with fee calculation and spot vacating
- Handling of attempts to park when the lot is full
- Display of available slots by type after each operation

## Extensibility: Parking Spot Assignment Strategy

Currently, parking spot assignment is handled directly by the `ParkingFloor` class with vehicle-to-spot-type mapping.

To support more flexible allocation, the system can be enhanced with a **Parking Spot Assignment Strategy** using the Strategy design pattern:

- Define a `ParkingSpotAssignmentStrategy` interface (e.g., `getParkingSpot(Vehicle vehicle)`, `releaseParkingSpot(ParkingSpot spot)`)
- Implement strategies such as:
- **NearestSpotStrategy:** Assign the nearest available spot
- **MostFreeSpotsStrategy:** Assign a spot based on floor with most free spots
- **PriorityBasedStrategy:** Assign spots by vehicle priority or other custom logic
- Have `ParkingLot` or `Entrance` hold a strategy reference and delegate assignment calls to it
- This modular approach supports new allocation algorithms without changing core parking floor logic

## Contributing

Contributions are welcome! Please fork the repository and submit pull requests.