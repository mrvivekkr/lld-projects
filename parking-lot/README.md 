# Parking Lot System

**Language**: Java  
**Topic**: Low-Level Design (LLD)  
**Concepts**: OOP, Concurrency, Design Patterns  

---

### üß† Project Overview

Design and implementation of a **Parking Lot System** in Java following key **Object-Oriented Design** principles.  
It handles **multiple vehicle types, parking spot types**, supports **thread-safe operations**, and demonstrates **extensibility** using design patterns.

---

### ‚öôÔ∏è Features

- Supports multiple vehicle types: `Car`, `Truck`, `Van`, `Motorcycle`
- Multiple parking spot types: `Compact`, `Large`, `Handicapped`, `Motorcycle`
- Singleton `ParkingLot` class managing multiple floors and parking spots
- Entrance and Exit panels for ticket issuance and spot vacating
- Pricing strategy implemented via **Strategy Design Pattern** (hourly pricing)
- Thread-safe spot assignment using synchronized methods and concurrent collections
- Custom exceptions for handling full parking lot and unavailable slots
- Demonstrates parking, exiting, and full-lot handling scenarios
- Dynamic display of available parking slots by type

---

### üß™ Demo Usage

The `Application` main method demonstrates:

- Creating a parking lot with multiple floors and spots
- Vehicle entry with ticket generation and spot assignment
- Vehicle exit with fee calculation and spot vacating
- Handling attempts to park when the lot is full
- Displaying available slots by type after each operation

---

### ‚ö° Getting Started

#### Prerequisites

- Java JDK 11 or higher  
- Maven or any Java build tool  
- IDE of your choice (IntelliJ, Eclipse, VSCode, etc.)

#### Installation

```bash
# Clone the repository
git clone <repository-url>

# Navigate into the project folder
cd parking-lot

# Build the project
mvn clean install
Run the Application class to see the demo and system usage.

üí° Extensibility: Parking Spot Assignment Strategy
Currently, parking spot assignment is handled directly by the ParkingFloor class using fixed vehicle-to-spot-type mapping.

To support more flexible allocation, introduce a ParkingSpotAssignmentStrategy interface:

getParkingSpot(Vehicle vehicle)

releaseParkingSpot(ParkingSpot spot)

Possible strategy implementations:

NearestSpotStrategy: Assign the nearest available spot

MostFreeSpotsStrategy: Choose floor with most free spots

PriorityBasedStrategy: Assign spots based on vehicle priority or other logic

Integration:

Have ParkingLot or Entrance hold a strategy reference

Delegate spot assignment calls to the chosen strategy

This modular approach supports new allocation algorithms without changing core parking floor logic

üìå Contributing
Contributions are welcome! Please fork the repository and submit pull requests.

Copy code
